#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<errno.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<unistd.h>
#define MAX 4096
#define SERV_PORT 6666
int main(int argc, char** argv){
    int  socket_fd=socket(AF_INET, SOCK_STREAM, 0);
    int  conn_fd;
    char  buff[MAX];
    if( socket_fd==-1 ){
        printf("create socket error: %s(errno: %d)\n",strerror(errno),errno);
        return 0;
    }
    struct sockaddr_in  servaddr;
    memset(&servaddr, 0, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(SERV_PORT);
    servaddr.sin_addr.s_addr=htonl(INADDR_ANY);
    if( bind(listen_fd, (struct sockaddr*)&servaddr, sizeof(servaddr)) == -1){
        perror("bind error");
        exit(1);
    }
    if( listen(listen_fd, 10) == -1){
        printf("listen socket error: %s(errno: %d)\n",strerror(errno),errno);
        return 0;
    }
    printf("waiting for client's request\n");
    int n;
    while(1){
        if( (conn_fd = accept(listen_fd, (struct sockaddr*)NULL, NULL)) == -1){
            printf("accept socket error: %s(errno: %d)",strerror(errno),errno);
            continue;
        }
        n = recv(conn_fd, buff, MAXLINE, 0);
        buff[n] = '\0';
        printf("recv msg from client: %s\n", buff);
        close(conn_fd);
    }
    close(listen_fd);
    return 0;
}
